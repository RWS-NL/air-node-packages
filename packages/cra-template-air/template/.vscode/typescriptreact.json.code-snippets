{
  // Place your webcomponents workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "insert snapshot test block": {
    "scope": "javascriptreact, typescriptreact",
    "prefix": "snaptest",
    "description": "Generates a Snapshot testing block",
    "body": [
      "describe('Snapshot Testing', () => {",
      "  test('Required Props', () => {",
      "    const $1 = shallow(<$2 />);",
      "    expect($1).toMatchSnapshot();",
      "  });",
      "",
      "  test('Optional Props', () => {",
      "    const $1 = shallow(<$2 />);",
      "    expect($1).toMatchSnapshot();",
      "  });",
      "",
      "  test('AdditionalTest', () => {",
      "    const $1 = shallow(<$2 />);",
      "    expect($1).toMatchSnapshot();",
      "  });",
      "});"
    ]
  },
  "Insert snapshot test block for provider components": {
    "scope": "typescriptreact, typescript",
    "prefix": "provsnaptest",
    "description": "Generates a Snapshot testing block for a component using provider setup",
    "body": [
      "describe('Snapshot Testing', () => {",
      "  let providerComponent: {",
      "    providerMount: ReactWrapper<any, Readonly<{}>, Component<{}, {}, any>>;",
      "    component: ReactWrapper<any, any, typeof $2>;",
      "    store: Store<RootState> | MockStoreEnhanced<RootState>;",
      "  };",
      "  let provider$2: typeof providerComponent['providerMount'];",
      "  let $1: typeof providerComponent['component'];",
      "  let store: typeof providerComponent['store'];",
      "",
      "  test('Required Props', () => {",
      "    const state = {...initialTestState};",
      "",
      "    providerComponent = componentWithProvidersSetup<$2Props, any, typeof $2>(",
      "      {",
      "        PrimaryComponent: Connected$2,",
      "        SubComponent: $2,",
      "        state,",
      "        shouldUseRealStore: false,",
      "      });",
      "    provider$2 = providerComponent.providerMount;",
      "    $1 = providerComponent.component;",
      "    store = providerComponent.store;",
      "",
      "    expect(provider$2).toMatchSnapshot()",
      "    expect($1).toMatchSnapshot()",
      "    expect(store).toMatchSnapshot();",
      "  });",
      "",
      "  test('Optional Props', () => {",
      "    const state = {...initialTestState};",
      "    const optionalProps: Partial<$2Props> = {",
      "      // Fill with optional props",
      "    };",
      "",
      "    providerComponent = componentWithProvidersSetup<$2Props, any, typeof $2>(",
      "      {",
      "        PrimaryComponent: Connected$2,",
      "        SubComponent: $2,",
      "        state,",
      "        componentProps: optionalProps,",
      "        shouldUseRealStore: false,",
      "      });",
      "    provider$2 = providerComponent.providerMount;",
      "    $1 = providerComponent.component;",
      "    store = providerComponent.store;",
      "",
      "    expect(provider$2).toMatchSnapshot()",
      "    expect($1).toMatchSnapshot()",
      "    expect(store).toMatchSnapshot();",
      "  });",
      "});"
    ]
  },
  "Disable console-log eslint rule": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "lintlog",
    "body": [
      "/* eslint-disable no-console*/",
    ],
    "description": "Disables the 'no-console' rule of ESLint"
  },
  "Inserts a semantic test": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "newtest",
    "body": [
      "test('GIVEN $1 THEN $2', () => {",
      "  $3",
      "});"
    ],
    "description": "Inserts a semantic test"
  }
}