// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot Testing Optional Props 1`] = `
<Styled(ForwardRef(Button))
  className="sample-class"
  classes={
    Object {
      "containedPrimary": "buttonPrimary Button-buttonShadow",
      "containedSecondary": "buttonSecondary Button-buttonShadow",
      "disabled": "buttonDisabled",
      "outlined": "buttonOutlined Button-buttonShadow",
      "outlinedPrimary": "buttonOutlined Button-buttonShadow",
      "outlinedSecondary": "buttonOutlinedSecondary Button-buttonShadow",
      "root": "button",
    }
  }
  color="secondary"
  customclasses={
    Array [
      "sample-class",
    ]
  }
  data-qa="button-qa"
  disabled={true}
  label={
    <div>
      snapshot label
    </div>
  }
  onClick={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  variant="outlined"
>
  <div>
    snapshot label
  </div>
</Styled(ForwardRef(Button))>
`;

exports[`Snapshot Testing Required Props 1`] = `
<Styled(ForwardRef(Button))
  className=""
  classes={
    Object {
      "containedPrimary": "buttonPrimary Button-buttonShadow",
      "containedSecondary": "buttonSecondary Button-buttonShadow",
      "disabled": "buttonDisabled",
      "outlined": "buttonOutlined Button-buttonShadow",
      "outlinedPrimary": "buttonOutlined Button-buttonShadow",
      "outlinedSecondary": "buttonOutlinedSecondary Button-buttonShadow",
      "root": "button",
    }
  }
  color="primary"
  label="test"
  onClick={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  variant="contained"
>
  test
</Styled(ForwardRef(Button))>
`;

exports[`Snapshot Testing Varying Props 1`] = `
<Styled(ForwardRef(Button))
  className=""
  classes={
    Object {
      "containedPrimary": "buttonPrimary Button-buttonShadow",
      "containedSecondary": "buttonSecondary Button-buttonShadow",
      "disabled": "buttonDisabled",
      "outlined": "buttonOutlined Button-buttonShadow",
      "outlinedPrimary": "buttonOutlined Button-buttonShadow",
      "outlinedSecondary": "buttonOutlinedSecondary Button-buttonShadow",
      "root": "button",
    }
  }
  color="secondary"
  label={
    <div>
      snapshot label
    </div>
  }
  onClick={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  variant="outlined"
>
  <div>
    snapshot label
  </div>
</Styled(ForwardRef(Button))>
`;
